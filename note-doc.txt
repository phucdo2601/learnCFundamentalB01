1. Variables in C:
    In C programming language, a variable is a user-defined or a user-readable custom name assigned to a memory location. Variables hold a value that can be modified and reused many times during the program execution.

    A variable can be an alphabet or digits and start with an underscore, but you cannot declare a keyword as a variable name.

    Now that you have understood the fundamental definition of the Variables in C, go through the declaration part.

2. Datatypes in C:
Data Types in C
Last Updated : 28 Sep, 2023
Each variable in C has an associated data type. It specifies the type of data that the variable can store like integer, character, floating, double, etc. Each data type requires different amounts of memory and has some specific operations which can be performed over it. The data type is a collection of data with values having fixed values, meaning as well as its characteristics.

The data types in C can be classified as follows:

Types

Description

Primitive Data Types	Primitive data types are the most basic data types that are used for representing simple values such as integers, float, characters, etc.
User Defined Data Types	The user-defined data types are defined by the user himself.
Derived Types	The data types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types.
Data Types in C

Different data types also have different ranges up to which they can store numbers. These ranges may vary from compiler to compiler. Below is a list of ranges along with the memory requirement and format specifiers on the 32-bit GCC compiler.


Data Type 
 	Size (bytes) 
 	Range
 	Format Specifier 
 
short int 
 	2 
 	-32,768 to 32,767 
 	%hd 
 
unsigned short int 
 	2 
 	0 to 65,535 
 	%hu 
 
unsigned int 
 	4 
 	0 to 4,294,967,295 
 	%u 
 
int 
 	4 
 	-2,147,483,648 to 2,147,483,647 
 	%d 
 
long int 
 	4 
 	-2,147,483,648 to 2,147,483,647 
 	%ld 
 
unsigned long int 
 	4 
 	0 to 4,294,967,295 
 	%lu 
 
long long int 
 	8 
 	-(2^63) to (2^63)-1 
 	%lld 
 
unsigned long long int 
 	8 
 	0 to 18,446,744,073,709,551,615 
 	%llu 
 
signed char 
 	1 
 	-128 to 127 
 	%c 
 
unsigned char 
 	1 
 	0 to 255 
 	%c 
 
float 
 	4 
 	1.2E-38 to 3.4E+38	%f 
 
double 
 	8 
 	1.7E-308 to 1.7E+308	%lf 
 
long double 
 	16 
 	3.4E-4932 to 1.1E+4932	%Lf 
 
Note: The long, short, signed and unsigned are datatype modifier that can be used with some primitive data types to change the size or length of the datatype.

2. getch() is a function in C that reads a single character from the keyboard but does not display it on the screen. 
It is often used in console-based programs to capture input from the user without echoing the character. The function 
is defined in the conio.h header file, which is available in some compilers like Turbo C and 
Borland C, but it is not part of the standard C library and thus not available in many modern C environments.

3. fputc() is a function in C that writes a single character to a specified file stream. 
It is part of the standard input/output library and is defined in the <stdio.h> header file. 
This function is useful for writing characters to files, one character at a time.


3. fputs() is a function in C that writes a string to a specified file stream. 
It is part of the standard input/output library and is defined in the <stdio.h> header file. 
This function is used to write strings to files or to the standard output.

4. The gets() function in C is used to read a line of text from the standard input (usually the keyboard) and store it in a string. 
It is defined in the <stdio.h> header file. However, gets() is considered dangerous and is deprecated due to the risk of buffer overflow, 
which can lead to security vulnerabilities. Instead, safer alternatives like fgets() should be used.


5. fgetc() function in C is used to read a single character from a specified file stream. 
It is defined in the <stdio.h> header file and is part of the standard input/output library. 
This function is commonly used when reading files character by character.

6. fgetc() function in C is used to read a single character from a specified file stream. 
It is defined in the <stdio.h> header file and is part of the standard input/output library. 
This function is commonly used when reading files character by character.

7. fscanf() function in C is used to read formatted input from a file. It is part of the standard input/output library and is defined in the <stdio.h> header file. 
The fscanf() function works similarly to scanf(), but it reads input from the specified file stream instead of standard input.

8. fgets() function in C is used to read a string from a specified input stream. It reads characters from the stream until either a newline character ('\n') is encountered, 
the end-of-file (EOF) is reached, or the specified number of characters has been read. The fgets() function is defined in the <stdio.h> header file and is commonly used 
for reading lines of text from a file or standard input.

9. rewind() function in C is used to set the file position indicator for a given file stream to the beginning of the file. It is defined in the <stdio.h> header file. 
This function effectively allows you to start reading or writing to a file from the beginning after you have already read or written some data.

10. In C programming, fflush() is a standard library function used to flush a stream. This means that it forces a write of all buffered output for a given output or update stream. It can also be used to flush the input buffer, although this usage is less common and not recommended because it is not portable across all platforms.

11. In C programming, calloc is a standard library function used for dynamic memory allocation. It stands for "contiguous allocation" and is used to allocate memory for an array of elements, initializing all bytes in the allocated memory to zero.

12. 
In C programming, fseek is a standard library function used to move the file position indicator to a specific location within a file. This allows you to read from or write to different parts of a file without sequentially reading through its contents.

13. In C programming, realloc is a function used to resize a previously allocated block of memory. It is particularly useful when you need to adjust the size of an array or other dynamically allocated memory area without losing the existing data.
Related Functions
malloc: Allocates a block of memory.
calloc: Allocates memory for an array and initializes it to zero.
free: Frees previously allocated memory.